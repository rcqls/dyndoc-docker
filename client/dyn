#!/bin/bash

# copy from https://github.com/mkropat/sh-realpath.git
function abs_path {
    canonicalize_path "$(resolve_symlinks "$1")"
}

resolve_symlinks() {
    _resolve_symlinks "$1"
}

_resolve_symlinks() {
    _assert_no_path_cycles "$@" || return

    local dir_context path
    path=$(readlink -- "$1")
    if [ $? -eq 0 ]; then
        dir_context=$(dirname -- "$1")
        _resolve_symlinks "$(_prepend_dir_context_if_necessary "$dir_context" "$path")" "$@"
    else
        printf '%s\n' "$1"
    fi
}

_prepend_dir_context_if_necessary() {
    if [ "$1" = . ]; then
        printf '%s\n' "$2"
    else
        _prepend_path_if_relative "$1" "$2"
    fi
}

_prepend_path_if_relative() {
    case "$2" in
        /* ) printf '%s\n' "$2" ;;
         * ) printf '%s\n' "$1/$2" ;;
    esac
}

_assert_no_path_cycles() {
    local target path

    target=$1
    shift

    for path in "$@"; do
        if [ "$path" = "$target" ]; then
            return 1
        fi
    done
}

canonicalize_path() {
    if [ -d "$1" ]; then
        _canonicalize_dir_path "$1"
    else
        _canonicalize_file_path "$1"
    fi
}

_canonicalize_dir_path() {
    (cd "$1" 2>/dev/null && pwd -P)
}

_canonicalize_file_path() {
    local dir file
    dir=$(dirname -- "$1")
    file=$(basename -- "$1")
    (cd "$dir" 2>/dev/null && printf '%s/%s\n' "$(pwd -P)" "$file")
}

# if ! [ "${DYNDOC_DOCKER_HOME}" ] && [ -f "${HOME}/.dyndoc_docker_home" ]; then
# 		DYNDOC_DOCKER_HOME="`cat ${HOME}/.dyndoc_docker_home`"
# fi

if [ "${DYNDOC_DOCKER_HOME}" ]; then
		if ! [ "${DYNDOC_DOCKER_LIBRARY}" ]; then
			DYNDOC_DOCKER_LIBRARY="${DYNDOC_DOCKER_HOME}/library"
		fi
		if ! [ "${DYNDOC_DOCKER_PROJECT}" ]; then
			DYNDOC_DOCKER_PROJECT="${DYNDOC_DOCKER_HOME}/proj"
		fi
fi
## docker run -v requires absolute path!
if [ "${DYNDOC_DOCKER_LIBRARY}" ]; then
	DYNDOC_DOCKER_LIBRARY=`abs_path "${DYNDOC_DOCKER_LIBRARY}"`
else	 
	echo "Environment variable DYNDOC_DOCKER_LIBRARY is unset"
	exit
fi
if [ "${DYNDOC_DOCKER_PROJECT}" ]; then	
	DYNDOC_DOCKER_PROJECT=`abs_path "${DYNDOC_DOCKER_PROJECT}"`
else	 
	echo "Environment variable DYNDOC_DOCKER_PROJECT is unset"
	exit
fi

cmd="$1"

case "$cmd" in
env)
	echo "DYNDOC_DOCKER_HOME=$DYNDOC_DOCKER_HOME"
	echo "DYNDOC_DOCKER_LIBRARY=$DYNDOC_DOCKER_LIBRARY"
	echo "DYNDOC_DOCKER_PROJECT=$DYNDOC_DOCKER_PROJECT"
;;
start | restart | stop)
	if [ "$cmd" = "stop" ] || [ "$cmd" = "restart" ]; then
		docker stop dyndoc &>/dev/null; docker rm dyndoc &>/dev/null
	fi
	if [ "$cmd" = "start" ] || [ "$cmd" = "restart" ]; then
		docker run -d \
		-p 7777:7777 \
		-v ${DYNDOC_DOCKER_PROJECT}:/dyndoc-proj \
		-v ${DYNDOC_DOCKER_LIBRARY}:/dyndoc-library \
		--name dyndoc \
		dyndoc &>/dev/null
	fi
	echo "docker dyndoc: $cmd server!"
;;
R | irb  | gem) 
	shift;
	docker exec -ti dyndoc $cmd $*
;;
bash)
	docker exec -ti dyndoc /bin/bash
;;
prj)
	shift
	$cmd2="$1"
	case "$cmd2" in
	new)
		# Use a template script to generate locate  
		# model = "$2"
		# if [ "$model" = "" ]; model="default"; fi;   
		# mkdir -p ${DYNDOC_DOCKER_PROJECT}/$2{src,share,build,public}
	;;
	*)
	;;
	esac
;;
*)
	last="${@: -1}"
	length=$(($#-1))
	all_but_last="${@:1:$length}"
	filename=`abs_path ${last}`
	filename2=${filename/${DYNDOC_DOCKER_PROJECT}//dyndoc-proj}
	docker exec dyndoc dyn $all_but_last $filename2
;;
esac
